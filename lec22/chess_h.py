[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;25r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[25;1H"chess_path.py" 93L, 3116B[1;1H[31m'h7'[m : {[31m'g5'[m, [31m'f8'[m, [31m'f6'[m},
[31m'h8'[m : {[31m'f7'[m, [31m'g6'[m},
}


[38;5;130mdef[m [36mbfs[m(G, start, end):
    start = start
    path = {v: [36mNone[m [38;5;130mfor[m v [38;5;130min[m G}[10;5Hq = Queue()
    q.put(start)
    path[start] = [start][14;5H[38;5;130mwhile[m [38;5;130mnot[m q.empty():[15;9Hv = q.get()[16;9H[38;5;130mfor[m neighbor [38;5;130min[m G[v]:[17;13H[38;5;130mif[m path[neighbor] [38;5;130mis[m [36mNone[m:[18;17Hq.put(neighbor)[19;17Hpath[neighbor] = path[v] + [neighbor][20;17H[38;5;130mif[m neighbor == end:[21;21H[38;5;130mreturn[m path[neighbor][23;5H[38;5;130mreturn[m [36mNone[m[25;78H78,5[10C95%[12;5H[?25h[?25l[25;68H~@k[12;5H[25;68H   [11;5H[25;79H7[11;5H[?25h[?25l[25;68H~@k[11;5H[25;68H   [10;5H[25;79H6[10;5H[?25h[?25l[25;1HВ[25;2Hв[25;3Hе[25;4Hд[25;5Hи[25;6Hт[25;7Hе[25;8H  :qa  и[25;17Hн[25;18Hа[25;19Hж[25;20Hм[25;21Hи[25;22Hт[25;23Hе[25;24H <Enter> д[25;34Hл[25;35Hя[25;37Hв[25;38Hы[25;39Hх[25;40Hо[25;41Hд[25;42Hа[25;44Hи[25;45Hз[25;47HVim[25;78H[K[25;78H76,5[10C95%[10;5H[?25h[?25l[25;68H~@k[10;5H[25;68H   [10;4H[25;81H4[10;4H[?25h[?25l[25;68H~@k[10;4H[25;68H   [10;3H[25;81H3[10;3H[?25h[?25l[25;68H~@k[10;3H[25;68H   [10;2H[25;81H2[10;2H[?25h[?25l[25;68H~@k[10;2H[25;68H   [10;1H[25;81H1[10;1H[?25h[?25l[25;68H~@k[10;1H[25;68H   [9;1H[25;79H5[9;1H[?25h[?25l[25;68H~@k[9;1H[25;68H   [8;31H[8;12H[106m{[18C}[m[25;79H4,31[8;31H[?25h[?25l[25;68H~@k[8;31H[25;68H   [8;30H[8;12H{[18C}[25;82H0[8;30H[?25h[?25l[25;68H~@k[8;30H[25;68H   [8;29H[25;81H29[8;29H[?25h[?25l[25;68H~@k[8;29H[25;68H   [8;28H[25;82H8[8;28H[?25h[?25l[25;68H~@k[8;28H[25;68H   [8;27H[25;82H7[8;27H[?25h[?25l[25;68H~@k[8;27H[25;68H   [8;26H[25;82H6[8;26H[?25h[?25l[25;68H~@k[8;26H[25;68H   [8;25H[25;82H5[8;25H[?25h[?25l[25;68H~@k[8;25H[25;68H   [8;24H[25;82H4[8;24H[?25h[?25l[25;68H~@k[8;24H[25;68H   [8;23H[25;82H3[8;23H[?25h[?25l[25;68H~@k[8;23H[25;68H   [8;22H[25;82H2[8;22H[?25h[?25l[25;68H^H[8;22H[25;68H  [8;21H[25;82H1[8;21H[?25h[?25l[25;68H^H[8;21H[25;68H  [8;20H[25;82H0[8;20H[?25h[?25l[25;68H^H[8;20H[25;68H  [8;19H[25;81H19[8;19H[?25h[?25l[25;68H^Z[8;19H[25;1H
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?25h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[?12h[?12l[27m[23m[29m[m[H[2J[?25l[1;1H[31m'h7'[m : {[31m'g5'[m, [31m'f8'[m, [31m'f6'[m},
[31m'h8'[m : {[31m'f7'[m, [31m'g6'[m},
}


[38;5;130mdef[m [36mbfs[m(G, start, end):
    start = start
    path = {v: [36mNone[m [38;5;130mfor[m v [38;5;130min[m G}[10;5Hq = Queue()
    q.put(start)
    path[start] = [start][14;5H[38;5;130mwhile[m [38;5;130mnot[m q.empty():[15;9Hv = q.get()[16;9H[38;5;130mfor[m neighbor [38;5;130min[m G[v]:[17;13H[38;5;130mif[m path[neighbor] [38;5;130mis[m [36mNone[m:[18;17Hq.put(neighbor)[19;17Hpath[neighbor] = path[v] + [neighbor][20;17H[38;5;130mif[m neighbor == end:[21;21H[38;5;130mreturn[m path[neighbor][23;5H[38;5;130mreturn[m [36mNone[m[25;78H74,19[9C95%[8;19H[?25h[?25l[?25h[25;1H[?1004l[?2004l[?1l>[>4;m[?1049l[23;0;0tVim: Caught deadly signal HUP
Vim: Finished.
[25;1H[23;2t[23;1t, 'e3'},
'd2' : {'e4', 'b1', 'f3', 'b3', 'c4', 'f1'},
'd3' : {'b4', 'c1', 'e5', 'e1', 'f2', 'b2', 'f4', 'c5'},
'd4' : {'b5', 'f3', 'e6', 'b3', 'c6', 'c2', 'f5', 'e2'},
'd5' : {'c3', 'c7', 'e7', 'b4', 'b6', 'f6', 'f4', 'e3'},
'd6' : {'e4', 'b5', 'e8', 'f5', 'c4', 'b7', 'c8', 'f7'},
'd7' : {'b8', 'b6', 'e5', 'f8', 'f6', 'c5'},
'd8' : {'b7', 'f7', 'c6', 'e6'},
'e1' : {'d3', 'f3', 'c2', 'g2'},
'e2' : {'c3', 'g1', 'c1', 'd4', 'f4', 'g3'},
'e3' : {'d1', 'c2', 'c4', 'f5', 'g4', 'f1', 'g2', 'd5'},
'e4' : {'c3', 'f2', 'g5', 'd2', 'f6', 'c5', 'g3', 'd6'},
'e5' : {'d3', 'f3', 'g6', 'c6', 'd7', 'c4', 'g4', 'f7'},
'e6' : {'c7', 'g7', 'd8', 'g5', 'd4', 'f8', 'f4', 'c5'},
'e7' : {'g6', 'g8', 'c6', 'f5', 'c8', 'd5'},
'e8' : {'f6', 'g7', 'd6', 'c7'},
'f1' : {'h2', 'g3', 'd2', 'e3'},
'f2' : {'e4', 'd3', 'd1', 'h1', 'g4', 'h3'},
'f3' : {'g1', 'e5', 'h4', 'e1', 'g5', 'h2', 'd4', 'd2'},
'f4' : {'d3', 'g6', 'e6', 'h3', 'h5', 'g2', 'e2', 'd5'},
'f5' : {'e7', 'g7', 'h4', 'h6', 'd4', 'g3', 'e3', 'd6'},
'f6' : {'e4', 'h7', 'g8', 'e8', 'd7', 'g4', 'h5', 'd5'},
'f7' : {'h8', 'e5', 'd8', 'g5', 'h6', 'd6'},
'f8' : {'h7', 'g6', 'e6', 'd7'},
'g1' : {'f3', 'e2', 'h3'},
'g2' : {'f4', 'h4', 'e3', 'e1'},
'g3' : {'e4', 'h1', 'f5', 'f1', 'h5', 'e2'},
'g4' : {'e5', 'h2', 'f2', 'h6', 'f6', 'e3'},
'g5' : {'e4', 'f3', 'e6', 'h7', 'h3', 'f7'},
'g6' : {'e7', 'h8', 'h4', 'e5', 'f8', 'f4'},
'g7' : {'f5', 'h5', 'e8', 'e6'},
'g8' : {'e7', 'h6', 'f6'},
'h1' : {'f2', 'g3'},
'h2' : {'g4', 'f3', 'f1'},
'h3' : {'f4', 'f2', 'g5', 'g1'},
'h4' : {'g2', 'f3', 'g6', 'f5'},
'h5' : {'f4', 'g3', 'g7', 'f6'},
'h6' : {'g8', 'g4', 'f7', 'f5'},
'h7' : {'g5', 'f8', 'f6'},
'h8' : {'f7', 'g6'},
}


def bfs(G, start, end):
    start = start
    path = {v: None for v in G}
 
    q = Queue()
    q.put(start)
    path[start] = [start]

    while not q.empty():
        v = q.get()
        for neighbor in G[v]:
            if path[neighbor] is None:
                q.put(neighbor)
                path[neighbor] = path[v] + [neighbor]
                if neighbor == end:
                    return path[neighbor]

    return None


start, end = input().split()
print(bfs(G, start, end))
